// Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
// Code generated by MockGen. DO NOT EDIT.

// Package beego is a generated GoMock package.
package beego

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	orm "github.com/beego/beego/v2/client/orm"
	utils "github.com/beego/beego/v2/core/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockTxOrmer is a mock of TxOrmer interface.
type MockTxOrmer struct {
	ctrl     *gomock.Controller
	recorder *MockTxOrmerMockRecorder
}

// MockTxOrmerMockRecorder is the mock recorder for MockTxOrmer.
type MockTxOrmerMockRecorder struct {
	mock *MockTxOrmer
}

// NewMockTxOrmer creates a new mock instance.
func NewMockTxOrmer(ctrl *gomock.Controller) *MockTxOrmer {
	mock := &MockTxOrmer{ctrl: ctrl}
	mock.recorder = &MockTxOrmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxOrmer) EXPECT() *MockTxOrmerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTxOrmer) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxOrmerMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxOrmer)(nil).Commit))
}

// DBStats mocks base method.
func (m *MockTxOrmer) DBStats() *sql.DBStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBStats")
	ret0, _ := ret[0].(*sql.DBStats)
	return ret0
}

// DBStats indicates an expected call of DBStats.
func (mr *MockTxOrmerMockRecorder) DBStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBStats", reflect.TypeOf((*MockTxOrmer)(nil).DBStats))
}

// Delete mocks base method.
func (m *MockTxOrmer) Delete(arg0 interface{}, arg1 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTxOrmerMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTxOrmer)(nil).Delete), varargs...)
}

// DeleteWithCtx mocks base method.
func (m *MockTxOrmer) DeleteWithCtx(arg0 context.Context, arg1 interface{}, arg2 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithCtx", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithCtx indicates an expected call of DeleteWithCtx.
func (mr *MockTxOrmerMockRecorder) DeleteWithCtx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).DeleteWithCtx), varargs...)
}

// Driver mocks base method.
func (m *MockTxOrmer) Driver() orm.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(orm.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockTxOrmerMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockTxOrmer)(nil).Driver))
}

// Insert mocks base method.
func (m *MockTxOrmer) Insert(arg0 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFleet", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTxOrmerMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFleet", reflect.TypeOf((*MockTxOrmer)(nil).Insert), arg0)
}

// InsertMulti mocks base method.
func (m *MockTxOrmer) InsertMulti(arg0 int, arg1 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMulti", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMulti indicates an expected call of InsertMulti.
func (mr *MockTxOrmerMockRecorder) InsertMulti(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMulti", reflect.TypeOf((*MockTxOrmer)(nil).InsertMulti), arg0, arg1)
}

// InsertMultiWithCtx mocks base method.
func (m *MockTxOrmer) InsertMultiWithCtx(arg0 context.Context, arg1 int, arg2 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMultiWithCtx", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMultiWithCtx indicates an expected call of InsertMultiWithCtx.
func (mr *MockTxOrmerMockRecorder) InsertMultiWithCtx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMultiWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).InsertMultiWithCtx), arg0, arg1, arg2)
}

// InsertOrUpdate mocks base method.
func (m *MockTxOrmer) InsertOrUpdate(arg0 interface{}, arg1 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOrUpdate", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrUpdate indicates an expected call of InsertOrUpdate.
func (mr *MockTxOrmerMockRecorder) InsertOrUpdate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdate", reflect.TypeOf((*MockTxOrmer)(nil).InsertOrUpdate), varargs...)
}

// InsertOrUpdateWithCtx mocks base method.
func (m *MockTxOrmer) InsertOrUpdateWithCtx(arg0 context.Context, arg1 interface{}, arg2 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOrUpdateWithCtx", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrUpdateWithCtx indicates an expected call of InsertOrUpdateWithCtx.
func (mr *MockTxOrmerMockRecorder) InsertOrUpdateWithCtx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).InsertOrUpdateWithCtx), varargs...)
}

// InsertWithCtx mocks base method.
func (m *MockTxOrmer) InsertWithCtx(arg0 context.Context, arg1 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithCtx", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWithCtx indicates an expected call of InsertWithCtx.
func (mr *MockTxOrmerMockRecorder) InsertWithCtx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).InsertWithCtx), arg0, arg1)
}

// LoadRelated mocks base method.
func (m *MockTxOrmer) LoadRelated(arg0 interface{}, arg1 string, arg2 ...utils.KV) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadRelated", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRelated indicates an expected call of LoadRelated.
func (mr *MockTxOrmerMockRecorder) LoadRelated(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRelated", reflect.TypeOf((*MockTxOrmer)(nil).LoadRelated), varargs...)
}

// LoadRelatedWithCtx mocks base method.
func (m *MockTxOrmer) LoadRelatedWithCtx(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...utils.KV) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadRelatedWithCtx", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRelatedWithCtx indicates an expected call of LoadRelatedWithCtx.
func (mr *MockTxOrmerMockRecorder) LoadRelatedWithCtx(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRelatedWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).LoadRelatedWithCtx), varargs...)
}

// QueryM2M mocks base method.
func (m *MockTxOrmer) QueryM2M(arg0 interface{}, arg1 string) orm.QueryM2Mer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryM2M", arg0, arg1)
	ret0, _ := ret[0].(orm.QueryM2Mer)
	return ret0
}

// QueryM2M indicates an expected call of QueryM2M.
func (mr *MockTxOrmerMockRecorder) QueryM2M(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryM2M", reflect.TypeOf((*MockTxOrmer)(nil).QueryM2M), arg0, arg1)
}

// QueryM2MWithCtx mocks base method.
func (m *MockTxOrmer) QueryM2MWithCtx(arg0 context.Context, arg1 interface{}, arg2 string) orm.QueryM2Mer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryM2MWithCtx", arg0, arg1, arg2)
	ret0, _ := ret[0].(orm.QueryM2Mer)
	return ret0
}

// QueryM2MWithCtx indicates an expected call of QueryM2MWithCtx.
func (mr *MockTxOrmerMockRecorder) QueryM2MWithCtx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryM2MWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).QueryM2MWithCtx), arg0, arg1, arg2)
}

// QueryTable mocks base method.
func (m *MockTxOrmer) QueryTable(arg0 interface{}) orm.QuerySeter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTable", arg0)
	ret0, _ := ret[0].(orm.QuerySeter)
	return ret0
}

// QueryTable indicates an expected call of QueryTable.
func (mr *MockTxOrmerMockRecorder) QueryTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTable", reflect.TypeOf((*MockTxOrmer)(nil).QueryTable), arg0)
}

// QueryTableWithCtx mocks base method.
func (m *MockTxOrmer) QueryTableWithCtx(arg0 context.Context, arg1 interface{}) orm.QuerySeter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTableWithCtx", arg0, arg1)
	ret0, _ := ret[0].(orm.QuerySeter)
	return ret0
}

// QueryTableWithCtx indicates an expected call of QueryTableWithCtx.
func (mr *MockTxOrmerMockRecorder) QueryTableWithCtx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTableWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).QueryTableWithCtx), arg0, arg1)
}

// Raw mocks base method.
func (m *MockTxOrmer) Raw(arg0 string, arg1 ...interface{}) orm.RawSeter {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(orm.RawSeter)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockTxOrmerMockRecorder) Raw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockTxOrmer)(nil).Raw), varargs...)
}

// RawWithCtx mocks base method.
func (m *MockTxOrmer) RawWithCtx(arg0 context.Context, arg1 string, arg2 ...interface{}) orm.RawSeter {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawWithCtx", varargs...)
	ret0, _ := ret[0].(orm.RawSeter)
	return ret0
}

// RawWithCtx indicates an expected call of RawWithCtx.
func (mr *MockTxOrmerMockRecorder) RawWithCtx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).RawWithCtx), varargs...)
}

// Read mocks base method.
func (m *MockTxOrmer) Read(arg0 interface{}, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockTxOrmerMockRecorder) Read(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTxOrmer)(nil).Read), varargs...)
}

// ReadForUpdate mocks base method.
func (m *MockTxOrmer) ReadForUpdate(arg0 interface{}, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadForUpdate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadForUpdate indicates an expected call of ReadForUpdate.
func (mr *MockTxOrmerMockRecorder) ReadForUpdate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadForUpdate", reflect.TypeOf((*MockTxOrmer)(nil).ReadForUpdate), varargs...)
}

// ReadForUpdateWithCtx mocks base method.
func (m *MockTxOrmer) ReadForUpdateWithCtx(arg0 context.Context, arg1 interface{}, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadForUpdateWithCtx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadForUpdateWithCtx indicates an expected call of ReadForUpdateWithCtx.
func (mr *MockTxOrmerMockRecorder) ReadForUpdateWithCtx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadForUpdateWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).ReadForUpdateWithCtx), varargs...)
}

// ReadOrCreate mocks base method.
func (m *MockTxOrmer) ReadOrCreate(arg0 interface{}, arg1 string, arg2 ...string) (bool, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadOrCreate", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadOrCreate indicates an expected call of ReadOrCreate.
func (mr *MockTxOrmerMockRecorder) ReadOrCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrCreate", reflect.TypeOf((*MockTxOrmer)(nil).ReadOrCreate), varargs...)
}

// ReadOrCreateWithCtx mocks base method.
func (m *MockTxOrmer) ReadOrCreateWithCtx(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...string) (bool, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadOrCreateWithCtx", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadOrCreateWithCtx indicates an expected call of ReadOrCreateWithCtx.
func (mr *MockTxOrmerMockRecorder) ReadOrCreateWithCtx(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrCreateWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).ReadOrCreateWithCtx), varargs...)
}

// ReadWithCtx mocks base method.
func (m *MockTxOrmer) ReadWithCtx(arg0 context.Context, arg1 interface{}, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWithCtx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadWithCtx indicates an expected call of ReadWithCtx.
func (mr *MockTxOrmerMockRecorder) ReadWithCtx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).ReadWithCtx), varargs...)
}

// Rollback mocks base method.
func (m *MockTxOrmer) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxOrmerMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxOrmer)(nil).Rollback))
}

// RollbackUnlessCommit mocks base method.
func (m *MockTxOrmer) RollbackUnlessCommit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackUnlessCommit")
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackUnlessCommit indicates an expected call of RollbackUnlessCommit.
func (mr *MockTxOrmerMockRecorder) RollbackUnlessCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackUnlessCommit", reflect.TypeOf((*MockTxOrmer)(nil).RollbackUnlessCommit))
}

// Update mocks base method.
func (m *MockTxOrmer) Update(arg0 interface{}, arg1 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTxOrmerMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTxOrmer)(nil).Update), varargs...)
}

// UpdateWithCtx mocks base method.
func (m *MockTxOrmer) UpdateWithCtx(arg0 context.Context, arg1 interface{}, arg2 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWithCtx", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithCtx indicates an expected call of UpdateWithCtx.
func (mr *MockTxOrmerMockRecorder) UpdateWithCtx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithCtx", reflect.TypeOf((*MockTxOrmer)(nil).UpdateWithCtx), varargs...)
}
