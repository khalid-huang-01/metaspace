// Code generated by MockGen. DO NOT EDIT.
// Source: client/interface.go

// Package client is a generated GoMock package.
package client

import (
	logger "fleetmanager/logger"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/huaweicloud/huaweicloud-sdk-go-v3/services/vpc/v2/model"
)

// MockVpcV2 is a mock of VpcV2 interface.
type MockVpcV2 struct {
	ctrl     *gomock.Controller
	recorder *MockVpcV2MockRecorder
}

// MockVpcV2MockRecorder is the mock recorder for MockVpcV2.
type MockVpcV2MockRecorder struct {
	mock *MockVpcV2
}

// NewMockVpcV2 creates a new mock instance.
func NewMockVpcV2(ctrl *gomock.Controller) *MockVpcV2 {
	mock := &MockVpcV2{ctrl: ctrl}
	mock.recorder = &MockVpcV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVpcV2) EXPECT() *MockVpcV2MockRecorder {
	return m.recorder
}

// CreateSecurityGroup mocks base method.
func (m *MockVpcV2) CreateSecurityGroup(request *model.CreateSecurityGroupRequest) (*model.CreateSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", request)
	ret0, _ := ret[0].(*model.CreateSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockVpcV2MockRecorder) CreateSecurityGroup(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockVpcV2)(nil).CreateSecurityGroup), request)
}

// CreateVpc mocks base method.
func (m *MockVpcV2) CreateVpc(request *model.CreateVpcRequest) (*model.CreateVpcResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpc", request)
	ret0, _ := ret[0].(*model.CreateVpcResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpc indicates an expected call of CreateVpc.
func (mr *MockVpcV2MockRecorder) CreateVpc(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpc", reflect.TypeOf((*MockVpcV2)(nil).CreateVpc), request)
}

// ListSecurityGroupRules mocks base method.
func (m *MockVpcV2) ListSecurityGroupRules(request *model.ListSecurityGroupRulesRequest) (*model.ListSecurityGroupRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupRules", request)
	ret0, _ := ret[0].(*model.ListSecurityGroupRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupRules indicates an expected call of ListSecurityGroupRules.
func (mr *MockVpcV2MockRecorder) ListSecurityGroupRules(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupRules", reflect.TypeOf((*MockVpcV2)(nil).ListSecurityGroupRules), request)
}

// ShowVpc mocks base method.
func (m *MockVpcV2) ShowVpc(request *model.ShowVpcRequest) (*model.ShowVpcResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowVpc", request)
	ret0, _ := ret[0].(*model.ShowVpcResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowVpc indicates an expected call of ShowVpc.
func (mr *MockVpcV2MockRecorder) ShowVpc(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowVpc", reflect.TypeOf((*MockVpcV2)(nil).ShowVpc), request)
}

// MockIRequest is a mock of IRequest interface.
type MockIRequest struct {
	ctrl     *gomock.Controller
	recorder *MockIRequestMockRecorder
}

// MockIRequestMockRecorder is the mock recorder for MockIRequest.
type MockIRequestMockRecorder struct {
	mock *MockIRequest
}

// NewMockIRequest creates a new mock instance.
func NewMockIRequest(ctrl *gomock.Controller) *MockIRequest {
	mock := &MockIRequest{ctrl: ctrl}
	mock.recorder = &MockIRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRequest) EXPECT() *MockIRequestMockRecorder {
	return m.recorder
}

// DoAuth mocks base method.
func (m *MockIRequest) DoAuth() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoAuth")
}

// DoAuth indicates an expected call of DoAuth.
func (mr *MockIRequestMockRecorder) DoAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAuth", reflect.TypeOf((*MockIRequest)(nil).DoAuth))
}

// DoRequest mocks base method.
func (m *MockIRequest) DoRequest() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequest")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoRequest indicates an expected call of DoRequest.
func (mr *MockIRequestMockRecorder) DoRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockIRequest)(nil).DoRequest))
}

// GetHeader mocks base method.
func (m *MockIRequest) GetHeader() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockIRequestMockRecorder) GetHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockIRequest)(nil).GetHeader))
}

// InitRequest mocks base method.
func (m *MockIRequest) InitRequest() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitRequest")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitRequest indicates an expected call of InitRequest.
func (mr *MockIRequestMockRecorder) InitRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRequest", reflect.TypeOf((*MockIRequest)(nil).InitRequest))
}

// QueryString mocks base method.
func (m *MockIRequest) QueryString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryString")
	ret0, _ := ret[0].(string)
	return ret0
}

// QueryString indicates an expected call of QueryString.
func (mr *MockIRequestMockRecorder) QueryString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryString", reflect.TypeOf((*MockIRequest)(nil).QueryString))
}

// SetAuthToken mocks base method.
func (m *MockIRequest) SetAuthToken(token []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthToken", token)
}

// SetAuthToken indicates an expected call of SetAuthToken.
func (mr *MockIRequestMockRecorder) SetAuthToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthToken", reflect.TypeOf((*MockIRequest)(nil).SetAuthToken), token)
}

// SetContentType mocks base method.
func (m *MockIRequest) SetContentType(ct string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContentType", ct)
}

// SetContentType indicates an expected call of SetContentType.
func (mr *MockIRequestMockRecorder) SetContentType(ct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContentType", reflect.TypeOf((*MockIRequest)(nil).SetContentType), ct)
}

// SetHeader mocks base method.
func (m *MockIRequest) SetHeader(header map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", header)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockIRequestMockRecorder) SetHeader(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockIRequest)(nil).SetHeader), header)
}

// SetHmacConf mocks base method.
func (m *MockIRequest) SetHmacConf(enableHmac bool, ak, sk []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHmacConf", enableHmac, ak, sk)
}

// SetHmacConf indicates an expected call of SetHmacConf.
func (mr *MockIRequestMockRecorder) SetHmacConf(enableHmac, ak, sk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHmacConf", reflect.TypeOf((*MockIRequest)(nil).SetHmacConf), enableHmac, ak, sk)
}

// SetLogger mocks base method.
func (m *MockIRequest) SetLogger(l *logger.FMLogger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", l)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockIRequestMockRecorder) SetLogger(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockIRequest)(nil).SetLogger), l)
}

// SetQuery mocks base method.
func (m *MockIRequest) SetQuery(k, v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQuery", k, v)
}

// SetQuery indicates an expected call of SetQuery.
func (mr *MockIRequestMockRecorder) SetQuery(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuery", reflect.TypeOf((*MockIRequest)(nil).SetQuery), k, v)
}

// SetSubjectToken mocks base method.
func (m *MockIRequest) SetSubjectToken(token []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubjectToken", token)
}

// SetSubjectToken indicates an expected call of SetSubjectToken.
func (mr *MockIRequestMockRecorder) SetSubjectToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubjectToken", reflect.TypeOf((*MockIRequest)(nil).SetSubjectToken), token)
}

// WriteCallLog mocks base method.
func (m *MockIRequest) WriteCallLog(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteCallLog", err)
}

// WriteCallLog indicates an expected call of WriteCallLog.
func (mr *MockIRequestMockRecorder) WriteCallLog(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCallLog", reflect.TypeOf((*MockIRequest)(nil).WriteCallLog), err)
}
