// Code generated by MockGen. DO NOT EDIT.
// Source: workflow/directer/directer.go

// Package directer is a generated GoMock package.
package directer

import (
	logger "fleetmanager/logger"
	directer "fleetmanager/workflow/directer"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDirecter is a mock of Directer interface.
type MockDirecter struct {
	ctrl     *gomock.Controller
	recorder *MockDirecterMockRecorder
}

// MockDirecterMockRecorder is the mock recorder for MockDirecter.
type MockDirecterMockRecorder struct {
	mock *MockDirecter
}

// NewMockDirecter creates a new mock instance.
func NewMockDirecter(ctrl *gomock.Controller) *MockDirecter {
	mock := &MockDirecter{ctrl: ctrl}
	mock.recorder = &MockDirecterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirecter) EXPECT() *MockDirecterMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockDirecter) GetContext() *directer.WorkflowContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(*directer.WorkflowContext)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockDirecterMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockDirecter)(nil).GetContext))
}

// GetLogger mocks base method.
func (m *MockDirecter) GetLogger() *logger.FMLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*logger.FMLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockDirecterMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockDirecter)(nil).GetLogger))
}

// Process mocks base method.
func (m *MockDirecter) Process(ctx *directer.ExecuteContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", ctx)
}

// Process indicates an expected call of Process.
func (mr *MockDirecterMockRecorder) Process(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockDirecter)(nil).Process), ctx)
}
