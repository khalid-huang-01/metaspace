// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auxproxy_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScaseGrpcSdkServiceClient is the client API for ScaseGrpcSdkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScaseGrpcSdkServiceClient interface {
	// 上报进程就绪
	ProcessReady(ctx context.Context, in *ProcessReadyRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error)
	// 上报服务器会话激活
	ActivateServerSession(ctx context.Context, in *ActivateServerSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error)
	// 上报客户端会话接入
	AcceptClientSession(ctx context.Context, in *AcceptClientSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error)
	// 上报客户端会话离开
	RemoveClientSession(ctx context.Context, in *RemoveClientSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error)
	// 获取客户端会话信息
	DescribeClientSessions(ctx context.Context, in *DescribeClientSessionsRequest, opts ...grpc.CallOption) (*DescribeClientSessionsResponse, error)
	// 更新客户端会话加入策略
	UpdateClientSessionCreationPolicy(ctx context.Context, in *UpdateClientSessionCreationPolicyRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error)
	// 上报服务器会话结束
	TerminateServerSession(ctx context.Context, in *TerminateServerSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error)
	// 上报进程结束
	ProcessEnding(ctx context.Context, in *ProcessEndingRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error)
}

type scaseGrpcSdkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScaseGrpcSdkServiceClient(cc grpc.ClientConnInterface) ScaseGrpcSdkServiceClient {
	return &scaseGrpcSdkServiceClient{cc}
}

func (c *scaseGrpcSdkServiceClient) ProcessReady(ctx context.Context, in *ProcessReadyRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error) {
	out := new(AuxProxyResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/ProcessReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaseGrpcSdkServiceClient) ActivateServerSession(ctx context.Context, in *ActivateServerSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error) {
	out := new(AuxProxyResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/ActivateServerSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaseGrpcSdkServiceClient) AcceptClientSession(ctx context.Context, in *AcceptClientSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error) {
	out := new(AuxProxyResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/AcceptClientSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaseGrpcSdkServiceClient) RemoveClientSession(ctx context.Context, in *RemoveClientSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error) {
	out := new(AuxProxyResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/RemoveClientSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaseGrpcSdkServiceClient) DescribeClientSessions(ctx context.Context, in *DescribeClientSessionsRequest, opts ...grpc.CallOption) (*DescribeClientSessionsResponse, error) {
	out := new(DescribeClientSessionsResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/DescribeClientSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaseGrpcSdkServiceClient) UpdateClientSessionCreationPolicy(ctx context.Context, in *UpdateClientSessionCreationPolicyRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error) {
	out := new(AuxProxyResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/UpdateClientSessionCreationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaseGrpcSdkServiceClient) TerminateServerSession(ctx context.Context, in *TerminateServerSessionRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error) {
	out := new(AuxProxyResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/TerminateServerSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaseGrpcSdkServiceClient) ProcessEnding(ctx context.Context, in *ProcessEndingRequest, opts ...grpc.CallOption) (*AuxProxyResponse, error) {
	out := new(AuxProxyResponse)
	err := c.cc.Invoke(ctx, "/auxproxyService.ScaseGrpcSdkService/ProcessEnding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScaseGrpcSdkServiceServer is the server API for ScaseGrpcSdkService service.
// All implementations must embed UnimplementedScaseGrpcSdkServiceServer
// for forward compatibility
type ScaseGrpcSdkServiceServer interface {
	// 上报进程就绪
	ProcessReady(context.Context, *ProcessReadyRequest) (*AuxProxyResponse, error)
	// 上报服务器会话激活
	ActivateServerSession(context.Context, *ActivateServerSessionRequest) (*AuxProxyResponse, error)
	// 上报客户端会话接入
	AcceptClientSession(context.Context, *AcceptClientSessionRequest) (*AuxProxyResponse, error)
	// 上报客户端会话离开
	RemoveClientSession(context.Context, *RemoveClientSessionRequest) (*AuxProxyResponse, error)
	// 获取客户端会话信息
	DescribeClientSessions(context.Context, *DescribeClientSessionsRequest) (*DescribeClientSessionsResponse, error)
	// 更新客户端会话加入策略
	UpdateClientSessionCreationPolicy(context.Context, *UpdateClientSessionCreationPolicyRequest) (*AuxProxyResponse, error)
	// 上报服务器会话结束
	TerminateServerSession(context.Context, *TerminateServerSessionRequest) (*AuxProxyResponse, error)
	// 上报进程结束
	ProcessEnding(context.Context, *ProcessEndingRequest) (*AuxProxyResponse, error)
	mustEmbedUnimplementedScaseGrpcSdkServiceServer()
}

// UnimplementedScaseGrpcSdkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScaseGrpcSdkServiceServer struct {
}

func (UnimplementedScaseGrpcSdkServiceServer) ProcessReady(context.Context, *ProcessReadyRequest) (*AuxProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessReady not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) ActivateServerSession(context.Context, *ActivateServerSessionRequest) (*AuxProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateServerSession not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) AcceptClientSession(context.Context, *AcceptClientSessionRequest) (*AuxProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptClientSession not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) RemoveClientSession(context.Context, *RemoveClientSessionRequest) (*AuxProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClientSession not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) DescribeClientSessions(context.Context, *DescribeClientSessionsRequest) (*DescribeClientSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeClientSessions not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) UpdateClientSessionCreationPolicy(context.Context, *UpdateClientSessionCreationPolicyRequest) (*AuxProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientSessionCreationPolicy not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) TerminateServerSession(context.Context, *TerminateServerSessionRequest) (*AuxProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateServerSession not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) ProcessEnding(context.Context, *ProcessEndingRequest) (*AuxProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEnding not implemented")
}
func (UnimplementedScaseGrpcSdkServiceServer) mustEmbedUnimplementedScaseGrpcSdkServiceServer() {}

// UnsafeScaseGrpcSdkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScaseGrpcSdkServiceServer will
// result in compilation errors.
type UnsafeScaseGrpcSdkServiceServer interface {
	mustEmbedUnimplementedScaseGrpcSdkServiceServer()
}

func RegisterScaseGrpcSdkServiceServer(s grpc.ServiceRegistrar, srv ScaseGrpcSdkServiceServer) {
	s.RegisterService(&ScaseGrpcSdkService_ServiceDesc, srv)
}

func _ScaseGrpcSdkService_ProcessReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).ProcessReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/ProcessReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).ProcessReady(ctx, req.(*ProcessReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScaseGrpcSdkService_ActivateServerSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateServerSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).ActivateServerSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/ActivateServerSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).ActivateServerSession(ctx, req.(*ActivateServerSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScaseGrpcSdkService_AcceptClientSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptClientSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).AcceptClientSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/AcceptClientSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).AcceptClientSession(ctx, req.(*AcceptClientSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScaseGrpcSdkService_RemoveClientSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClientSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).RemoveClientSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/RemoveClientSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).RemoveClientSession(ctx, req.(*RemoveClientSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScaseGrpcSdkService_DescribeClientSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeClientSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).DescribeClientSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/DescribeClientSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).DescribeClientSessions(ctx, req.(*DescribeClientSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScaseGrpcSdkService_UpdateClientSessionCreationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientSessionCreationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).UpdateClientSessionCreationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/UpdateClientSessionCreationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).UpdateClientSessionCreationPolicy(ctx, req.(*UpdateClientSessionCreationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScaseGrpcSdkService_TerminateServerSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateServerSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).TerminateServerSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/TerminateServerSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).TerminateServerSession(ctx, req.(*TerminateServerSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScaseGrpcSdkService_ProcessEnding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEndingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaseGrpcSdkServiceServer).ProcessEnding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auxproxyService.ScaseGrpcSdkService/ProcessEnding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaseGrpcSdkServiceServer).ProcessEnding(ctx, req.(*ProcessEndingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScaseGrpcSdkService_ServiceDesc is the grpc.ServiceDesc for ScaseGrpcSdkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScaseGrpcSdkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auxproxyService.ScaseGrpcSdkService",
	HandlerType: (*ScaseGrpcSdkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessReady",
			Handler:    _ScaseGrpcSdkService_ProcessReady_Handler,
		},
		{
			MethodName: "ActivateServerSession",
			Handler:    _ScaseGrpcSdkService_ActivateServerSession_Handler,
		},
		{
			MethodName: "AcceptClientSession",
			Handler:    _ScaseGrpcSdkService_AcceptClientSession_Handler,
		},
		{
			MethodName: "RemoveClientSession",
			Handler:    _ScaseGrpcSdkService_RemoveClientSession_Handler,
		},
		{
			MethodName: "DescribeClientSessions",
			Handler:    _ScaseGrpcSdkService_DescribeClientSessions_Handler,
		},
		{
			MethodName: "UpdateClientSessionCreationPolicy",
			Handler:    _ScaseGrpcSdkService_UpdateClientSessionCreationPolicy_Handler,
		},
		{
			MethodName: "TerminateServerSession",
			Handler:    _ScaseGrpcSdkService_TerminateServerSession_Handler,
		},
		{
			MethodName: "ProcessEnding",
			Handler:    _ScaseGrpcSdkService_ProcessEnding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auxproxy_grpc_service.proto",
}
