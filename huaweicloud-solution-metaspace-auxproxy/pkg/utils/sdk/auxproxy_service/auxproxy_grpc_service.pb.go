// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: auxproxy_grpc_service.proto

package auxproxy_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 进程准备就绪后调用
type ProcessReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPathsToUpload []string `protobuf:"bytes,1,rep,name=logPathsToUpload,proto3" json:"logPathsToUpload,omitempty"` // 进程日志的存放路径
	ClientPort       int32    `protobuf:"varint,2,opt,name=clientPort,proto3" json:"clientPort,omitempty"`            // 进程对外开放的接口，供非SCASE服务使用
	GrpcPort         int32    `protobuf:"varint,3,opt,name=grpcPort,proto3" json:"grpcPort,omitempty"`                // 进程对外开放的接口，供SCASE服务使用
	Pid              int32    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`                          // 进程运行时的PID
}

func (x *ProcessReadyRequest) Reset() {
	*x = ProcessReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessReadyRequest) ProtoMessage() {}

func (x *ProcessReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessReadyRequest.ProtoReflect.Descriptor instead.
func (*ProcessReadyRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessReadyRequest) GetLogPathsToUpload() []string {
	if x != nil {
		return x.LogPathsToUpload
	}
	return nil
}

func (x *ProcessReadyRequest) GetClientPort() int32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *ProcessReadyRequest) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *ProcessReadyRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

// 进程在收到SCASE的启动服务器会话后需要调用
type ActivateServerSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSessionId string `protobuf:"bytes,1,opt,name=serverSessionId,proto3" json:"serverSessionId,omitempty"` // 服务器会话ID
	MaxClients      int32  `protobuf:"varint,2,opt,name=maxClients,proto3" json:"maxClients,omitempty"`          // 服务器会话可以承载的客户端会话数
}

func (x *ActivateServerSessionRequest) Reset() {
	*x = ActivateServerSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateServerSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateServerSessionRequest) ProtoMessage() {}

func (x *ActivateServerSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateServerSessionRequest.ProtoReflect.Descriptor instead.
func (*ActivateServerSessionRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *ActivateServerSessionRequest) GetServerSessionId() string {
	if x != nil {
		return x.ServerSessionId
	}
	return ""
}

func (x *ActivateServerSessionRequest) GetMaxClients() int32 {
	if x != nil {
		return x.MaxClients
	}
	return 0
}

// 进程在客户端会话接入后调用
type AcceptClientSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSessionId string `protobuf:"bytes,1,opt,name=serverSessionId,proto3" json:"serverSessionId,omitempty"` // 服务器会话ID
	ClientSessionId string `protobuf:"bytes,2,opt,name=clientSessionId,proto3" json:"clientSessionId,omitempty"` // 客户端会话ID
}

func (x *AcceptClientSessionRequest) Reset() {
	*x = AcceptClientSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptClientSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptClientSessionRequest) ProtoMessage() {}

func (x *AcceptClientSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptClientSessionRequest.ProtoReflect.Descriptor instead.
func (*AcceptClientSessionRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *AcceptClientSessionRequest) GetServerSessionId() string {
	if x != nil {
		return x.ServerSessionId
	}
	return ""
}

func (x *AcceptClientSessionRequest) GetClientSessionId() string {
	if x != nil {
		return x.ClientSessionId
	}
	return ""
}

// 进程在客户端会话离开后调用
type RemoveClientSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSessionId string `protobuf:"bytes,1,opt,name=serverSessionId,proto3" json:"serverSessionId,omitempty"` // 服务器会话ID
	ClientSessionId string `protobuf:"bytes,2,opt,name=clientSessionId,proto3" json:"clientSessionId,omitempty"` // 客户端会话ID
}

func (x *RemoveClientSessionRequest) Reset() {
	*x = RemoveClientSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveClientSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveClientSessionRequest) ProtoMessage() {}

func (x *RemoveClientSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveClientSessionRequest.ProtoReflect.Descriptor instead.
func (*RemoveClientSessionRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveClientSessionRequest) GetServerSessionId() string {
	if x != nil {
		return x.ServerSessionId
	}
	return ""
}

func (x *RemoveClientSessionRequest) GetClientSessionId() string {
	if x != nil {
		return x.ClientSessionId
	}
	return ""
}

// 客户端会话信息
type ClientSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSessionId string `protobuf:"bytes,1,opt,name=clientSessionId,proto3" json:"clientSessionId,omitempty"` // 客户端会话ID
	ClientId        string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`               // 客户ID
	ServerSessionId string `protobuf:"bytes,3,opt,name=serverSessionId,proto3" json:"serverSessionId,omitempty"` // 服务器会话ID
	FleetId         string `protobuf:"bytes,4,opt,name=fleetId,proto3" json:"fleetId,omitempty"`                 // 队列ID
	IpAddress       string `protobuf:"bytes,5,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`             // 客户端会话的IP地址
	Status          string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`                   // 客户端会话状态，客户端会话的状态有RESERVED、TIMEOUT、ACTIVE和COMPLETED
	CreationTime    string `protobuf:"bytes,7,opt,name=creationTime,proto3" json:"creationTime,omitempty"`       // 客户端会话的创建时间，UTC时间
	TerminationTime string `protobuf:"bytes,8,opt,name=terminationTime,proto3" json:"terminationTime,omitempty"` // 客户端会话的终止时间，UTC时间
	Port            int32  `protobuf:"varint,9,opt,name=port,proto3" json:"port,omitempty"`                      // 客户端会话对外暴露的接口，供非SCASE服务使用
	ClientData      string `protobuf:"bytes,10,opt,name=clientData,proto3" json:"clientData,omitempty"`          // 客户数据
}

func (x *ClientSession) Reset() {
	*x = ClientSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSession) ProtoMessage() {}

func (x *ClientSession) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSession.ProtoReflect.Descriptor instead.
func (*ClientSession) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *ClientSession) GetClientSessionId() string {
	if x != nil {
		return x.ClientSessionId
	}
	return ""
}

func (x *ClientSession) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientSession) GetServerSessionId() string {
	if x != nil {
		return x.ServerSessionId
	}
	return ""
}

func (x *ClientSession) GetFleetId() string {
	if x != nil {
		return x.FleetId
	}
	return ""
}

func (x *ClientSession) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ClientSession) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClientSession) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *ClientSession) GetTerminationTime() string {
	if x != nil {
		return x.TerminationTime
	}
	return ""
}

func (x *ClientSession) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClientSession) GetClientData() string {
	if x != nil {
		return x.ClientData
	}
	return ""
}

// 进程获取客户端会话信息的请求
type DescribeClientSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSessionId           string `protobuf:"bytes,1,opt,name=serverSessionId,proto3" json:"serverSessionId,omitempty"`                     // 服务器会话ID
	ClientId                  string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`                                   // 客户ID
	ClientSessionId           string `protobuf:"bytes,3,opt,name=clientSessionId,proto3" json:"clientSessionId,omitempty"`                     // 客户端会话ID
	ClientSessionStatusFilter string `protobuf:"bytes,4,opt,name=clientSessionStatusFilter,proto3" json:"clientSessionStatusFilter,omitempty"` // 客户端会话状态过滤器
	NextToken                 string `protobuf:"bytes,5,opt,name=nextToken,proto3" json:"nextToken,omitempty"`                                 // 客户端会话列表的起始位置
	Limit                     int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`                                        // 客户端会话列表分页的页大小
}

func (x *DescribeClientSessionsRequest) Reset() {
	*x = DescribeClientSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeClientSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeClientSessionsRequest) ProtoMessage() {}

func (x *DescribeClientSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeClientSessionsRequest.ProtoReflect.Descriptor instead.
func (*DescribeClientSessionsRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeClientSessionsRequest) GetServerSessionId() string {
	if x != nil {
		return x.ServerSessionId
	}
	return ""
}

func (x *DescribeClientSessionsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DescribeClientSessionsRequest) GetClientSessionId() string {
	if x != nil {
		return x.ClientSessionId
	}
	return ""
}

func (x *DescribeClientSessionsRequest) GetClientSessionStatusFilter() string {
	if x != nil {
		return x.ClientSessionStatusFilter
	}
	return ""
}

func (x *DescribeClientSessionsRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeClientSessionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 进程获取客户端会话信息的返回体
type DescribeClientSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextToken      string           `protobuf:"bytes,1,opt,name=nextToken,proto3" json:"nextToken,omitempty"`           // 客户端会话列表的起始位置
	ClientSessions []*ClientSession `protobuf:"bytes,2,rep,name=clientSessions,proto3" json:"clientSessions,omitempty"` // 客户端会话信息
	Error          *Error           `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`                   // 查询客户端会话列表失败的错误码（选填）
}

func (x *DescribeClientSessionsResponse) Reset() {
	*x = DescribeClientSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeClientSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeClientSessionsResponse) ProtoMessage() {}

func (x *DescribeClientSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeClientSessionsResponse.ProtoReflect.Descriptor instead.
func (*DescribeClientSessionsResponse) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeClientSessionsResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DescribeClientSessionsResponse) GetClientSessions() []*ClientSession {
	if x != nil {
		return x.ClientSessions
	}
	return nil
}

func (x *DescribeClientSessionsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 进程更新客户端会话加入策略
type UpdateClientSessionCreationPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSessionId                string `protobuf:"bytes,1,opt,name=serverSessionId,proto3" json:"serverSessionId,omitempty"`                               // 服务器会话ID
	NewClientSessionCreationPolicy string `protobuf:"bytes,2,opt,name=newClientSessionCreationPolicy,proto3" json:"newClientSessionCreationPolicy,omitempty"` // 客户端会话创建策略
}

func (x *UpdateClientSessionCreationPolicyRequest) Reset() {
	*x = UpdateClientSessionCreationPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientSessionCreationPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientSessionCreationPolicyRequest) ProtoMessage() {}

func (x *UpdateClientSessionCreationPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientSessionCreationPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateClientSessionCreationPolicyRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateClientSessionCreationPolicyRequest) GetServerSessionId() string {
	if x != nil {
		return x.ServerSessionId
	}
	return ""
}

func (x *UpdateClientSessionCreationPolicyRequest) GetNewClientSessionCreationPolicy() string {
	if x != nil {
		return x.NewClientSessionCreationPolicy
	}
	return ""
}

// 进程在结束服务器会话后调用
type TerminateServerSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSessionId string `protobuf:"bytes,1,opt,name=serverSessionId,proto3" json:"serverSessionId,omitempty"` // 服务器会话ID
}

func (x *TerminateServerSessionRequest) Reset() {
	*x = TerminateServerSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateServerSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateServerSessionRequest) ProtoMessage() {}

func (x *TerminateServerSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateServerSessionRequest.ProtoReflect.Descriptor instead.
func (*TerminateServerSessionRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{8}
}

func (x *TerminateServerSessionRequest) GetServerSessionId() string {
	if x != nil {
		return x.ServerSessionId
	}
	return ""
}

// 进程在退出时调用
type ProcessEndingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid int32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"` // 进程运行时的PID
}

func (x *ProcessEndingRequest) Reset() {
	*x = ProcessEndingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEndingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEndingRequest) ProtoMessage() {}

func (x *ProcessEndingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEndingRequest.ProtoReflect.Descriptor instead.
func (*ProcessEndingRequest) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessEndingRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

// 返回结果，调用成功时，返回的error为空，返回体内容为空
// 调用失败时，返回的error为非空，具体的错误码在返回体内部
// AuxProxy的业务错误码从SCASE.00020000开始
// SCASE代表表示服务名
// “."连接服务名与八位数字
// 八位数字表示具体的错误类型，其中前四位0002表示AuxProxy组件，后四位表示具体的错误
// 后四位划分：前两位表示资源类型，00表示系统类型的错误，01表示app process，02表示server session，03表示client session
// 综上所述
// AuxProxy的app process的错误码占用范围为：SCASE.00020100到SCASE.00020199，共100位
// AuxProxy的server session的错误码占用范围为：SCASE.00020200到SCASE.00020299，共100位
// AuxProxy的client session的错误码占用范围为：SCASE.00020300到SCASE.00020399，共100位
// app process错误码：
// SCASE.00020100：上报进程就绪失败
// SCASE.00020101：上报进程结束失败
// server session错误码：
// SCASE.00020200：上报服务器会话激活失败
// SCASE.00020201：上报服务器会话结束失败
// client session错误码：
// SCASE.00020300：上报客户端会话接入失败
// SCASE.00020301：上报客户端会话离开失败
// SCASE.00020302：获取客户端会话信息失败
// SCASE.00020303：更新客户端会话加入策略失败
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode string `protobuf:"bytes,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"` // 错误码
	ErrorMsg  string `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`   // 错误信息
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{10}
}

func (x *Error) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *Error) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// SCASE服务无返回内容的接口的返回体
type AuxProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"` // 错误码（选填）
}

func (x *AuxProxyResponse) Reset() {
	*x = AuxProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auxproxy_grpc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxProxyResponse) ProtoMessage() {}

func (x *AuxProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auxproxy_grpc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxProxyResponse.ProtoReflect.Descriptor instead.
func (*AuxProxyResponse) Descriptor() ([]byte, []int) {
	return file_auxproxy_grpc_service_proto_rawDescGZIP(), []int{11}
}

func (x *AuxProxyResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_auxproxy_grpc_service_proto protoreflect.FileDescriptor

var file_auxproxy_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61,
	0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x22, 0x68, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x1a, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd1,
	0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x81, 0x02, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9c, 0x01,
	0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6e, 0x65,
	0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x49, 0x0a, 0x1d,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x22, 0x41, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xfe, 0x06, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x73, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x53, 0x64, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x24,
	0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x15, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e,
	0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x78,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x78,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x39, 0x2e, 0x61, 0x75,
	0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x61, 0x75,
	0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x3b, 0x61, 0x75,
	0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auxproxy_grpc_service_proto_rawDescOnce sync.Once
	file_auxproxy_grpc_service_proto_rawDescData = file_auxproxy_grpc_service_proto_rawDesc
)

func file_auxproxy_grpc_service_proto_rawDescGZIP() []byte {
	file_auxproxy_grpc_service_proto_rawDescOnce.Do(func() {
		file_auxproxy_grpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_auxproxy_grpc_service_proto_rawDescData)
	})
	return file_auxproxy_grpc_service_proto_rawDescData
}

var file_auxproxy_grpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_auxproxy_grpc_service_proto_goTypes = []interface{}{
	(*ProcessReadyRequest)(nil),                      // 0: auxproxyService.ProcessReadyRequest
	(*ActivateServerSessionRequest)(nil),             // 1: auxproxyService.ActivateServerSessionRequest
	(*AcceptClientSessionRequest)(nil),               // 2: auxproxyService.AcceptClientSessionRequest
	(*RemoveClientSessionRequest)(nil),               // 3: auxproxyService.RemoveClientSessionRequest
	(*ClientSession)(nil),                            // 4: auxproxyService.ClientSession
	(*DescribeClientSessionsRequest)(nil),            // 5: auxproxyService.DescribeClientSessionsRequest
	(*DescribeClientSessionsResponse)(nil),           // 6: auxproxyService.DescribeClientSessionsResponse
	(*UpdateClientSessionCreationPolicyRequest)(nil), // 7: auxproxyService.UpdateClientSessionCreationPolicyRequest
	(*TerminateServerSessionRequest)(nil),            // 8: auxproxyService.TerminateServerSessionRequest
	(*ProcessEndingRequest)(nil),                     // 9: auxproxyService.ProcessEndingRequest
	(*Error)(nil),                                    // 10: auxproxyService.Error
	(*AuxProxyResponse)(nil),                         // 11: auxproxyService.AuxProxyResponse
}
var file_auxproxy_grpc_service_proto_depIdxs = []int32{
	4,  // 0: auxproxyService.DescribeClientSessionsResponse.clientSessions:type_name -> auxproxyService.ClientSession
	10, // 1: auxproxyService.DescribeClientSessionsResponse.error:type_name -> auxproxyService.Error
	10, // 2: auxproxyService.AuxProxyResponse.error:type_name -> auxproxyService.Error
	0,  // 3: auxproxyService.ScaseGrpcSdkService.ProcessReady:input_type -> auxproxyService.ProcessReadyRequest
	1,  // 4: auxproxyService.ScaseGrpcSdkService.ActivateServerSession:input_type -> auxproxyService.ActivateServerSessionRequest
	2,  // 5: auxproxyService.ScaseGrpcSdkService.AcceptClientSession:input_type -> auxproxyService.AcceptClientSessionRequest
	3,  // 6: auxproxyService.ScaseGrpcSdkService.RemoveClientSession:input_type -> auxproxyService.RemoveClientSessionRequest
	5,  // 7: auxproxyService.ScaseGrpcSdkService.DescribeClientSessions:input_type -> auxproxyService.DescribeClientSessionsRequest
	7,  // 8: auxproxyService.ScaseGrpcSdkService.UpdateClientSessionCreationPolicy:input_type -> auxproxyService.UpdateClientSessionCreationPolicyRequest
	8,  // 9: auxproxyService.ScaseGrpcSdkService.TerminateServerSession:input_type -> auxproxyService.TerminateServerSessionRequest
	9,  // 10: auxproxyService.ScaseGrpcSdkService.ProcessEnding:input_type -> auxproxyService.ProcessEndingRequest
	11, // 11: auxproxyService.ScaseGrpcSdkService.ProcessReady:output_type -> auxproxyService.AuxProxyResponse
	11, // 12: auxproxyService.ScaseGrpcSdkService.ActivateServerSession:output_type -> auxproxyService.AuxProxyResponse
	11, // 13: auxproxyService.ScaseGrpcSdkService.AcceptClientSession:output_type -> auxproxyService.AuxProxyResponse
	11, // 14: auxproxyService.ScaseGrpcSdkService.RemoveClientSession:output_type -> auxproxyService.AuxProxyResponse
	6,  // 15: auxproxyService.ScaseGrpcSdkService.DescribeClientSessions:output_type -> auxproxyService.DescribeClientSessionsResponse
	11, // 16: auxproxyService.ScaseGrpcSdkService.UpdateClientSessionCreationPolicy:output_type -> auxproxyService.AuxProxyResponse
	11, // 17: auxproxyService.ScaseGrpcSdkService.TerminateServerSession:output_type -> auxproxyService.AuxProxyResponse
	11, // 18: auxproxyService.ScaseGrpcSdkService.ProcessEnding:output_type -> auxproxyService.AuxProxyResponse
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_auxproxy_grpc_service_proto_init() }
func file_auxproxy_grpc_service_proto_init() {
	if File_auxproxy_grpc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auxproxy_grpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateServerSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptClientSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveClientSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeClientSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeClientSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientSessionCreationPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateServerSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEndingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auxproxy_grpc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auxproxy_grpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auxproxy_grpc_service_proto_goTypes,
		DependencyIndexes: file_auxproxy_grpc_service_proto_depIdxs,
		MessageInfos:      file_auxproxy_grpc_service_proto_msgTypes,
	}.Build()
	File_auxproxy_grpc_service_proto = out.File
	file_auxproxy_grpc_service_proto_rawDesc = nil
	file_auxproxy_grpc_service_proto_goTypes = nil
	file_auxproxy_grpc_service_proto_depIdxs = nil
}
